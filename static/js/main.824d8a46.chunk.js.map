{"version":3,"sources":["calculator/probabilityCalculations.ts","config.ts","api/traceLogging/logTrace.ts","ProbabilityCalculatorApp.tsx","theme/index.ts","index.tsx"],"names":["calculations","combined","x","y","either","config","TRACE_LOG_API_URL","logTrace","payload","a","fetch","method","body","JSON","stringify","headers","ProbabilityInput","control","label","field","error","errorText","required","max","min","name","rules","defaultValue","render","TextField","id","type","inputProps","step","Boolean","helperText","ProbabilityCalculatorApp","useState","calculationResult","setCalculationResult","useForm","handleSubmit","errors","formState","Container","maxWidth","Typography","align","variant","onSubmit","probabilityA","probabilityB","functionType","parseFloat","b","result","calculationType","inputs","select","MenuItem","value","Button","color","theme","createMuiTheme","typography","htmlFontSize","props","MuiTextField","MuiCard","responsiveFontSizes","ReactDOM","CssBaseline","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.824d8a46.chunk.js","sourcesContent":["export const combinedProbability = (x: number, y: number): number => x * y;\n\nexport const eitherProbability = (x: number, y: number): number =>\n  x + y - x * y;\n\nexport type CalculationTypes = \"either\" | \"combined\";\n\nexport const calculations: {\n  [Type in CalculationTypes]: (x: number, y: number) => number;\n} = {\n  combined: combinedProbability,\n  either: eitherProbability,\n};\n","const config = {\n  TRACE_LOG_API_URL: \"https://localhost:5001/logTrace\",\n};\n\nexport default config;\n","import { CalculationTypes } from \"../../calculator/probabilityCalculations\";\nimport config from \"../../config\";\n\ninterface LogTracePayload {\n  calculationType: CalculationTypes;\n  inputs: number[];\n  result: number;\n}\n\nexport const logTrace = async (payload: LogTracePayload) => {\n  try {\n    await fetch(config.TRACE_LOG_API_URL, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  } catch (error) {\n    /*\n        Intentionally ignoring errors here. Assuming that the logging functionality\n        is mainly for metrics gathering and less important than the app continuing to \n        function as normal.\n    */\n  }\n};\n","import {\n  Typography,\n  Container,\n  TextField,\n  Button,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport {\n  calculations,\n  CalculationTypes,\n} from \"./calculator/probabilityCalculations\";\nimport { Control, Controller, FieldError, useForm } from \"react-hook-form\";\nimport { logTrace } from \"./api/traceLogging/logTrace\";\n\ninterface ICalculatorFormInput {\n  probabilityA: string;\n  probabilityB: string;\n  functionType: CalculationTypes;\n}\n\nconst ProbabilityCalculatorApp = () => {\n  const [calculationResult, setCalculationResult] =\n    useState<number | null>(null);\n\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<ICalculatorFormInput>();\n\n  const onSubmit = ({\n    probabilityA,\n    probabilityB,\n    functionType,\n  }: ICalculatorFormInput) => {\n    const a = parseFloat(probabilityA);\n    const b = parseFloat(probabilityB);\n    const result = calculations[functionType](a, b);\n    setCalculationResult(result);\n    logTrace({ calculationType: functionType, inputs: [a, b], result });\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography align=\"center\" variant=\"h1\">\n        Probability Calculator\n      </Typography>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <ProbabilityInput\n          control={control}\n          label=\"Probability A\"\n          field=\"probabilityA\"\n          error={errors.probabilityA}\n        />\n        <ProbabilityInput\n          control={control}\n          label=\"Probability B\"\n          field=\"probabilityB\"\n          error={errors.probabilityB}\n        />\n        <Controller\n          name=\"functionType\"\n          control={control}\n          rules={{ required: true }}\n          defaultValue=\"\"\n          render={({ field }) => (\n            <TextField\n              {...field}\n              id=\"functionType\"\n              label=\"Function\"\n              select\n              error={Boolean(errors.functionType)}\n              helperText={\n                errors.functionType &&\n                errors.functionType.type === \"required\" &&\n                \"Please enter a value for Function\"\n              }\n            >\n              <MenuItem value=\"combined\">CombinedWith</MenuItem>\n              <MenuItem value=\"either\">Either</MenuItem>\n            </TextField>\n          )}\n        />\n\n        <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\n          Calculate\n        </Button>\n      </form>\n\n      <Typography>Result: {calculationResult}</Typography>\n    </Container>\n  );\n};\n\ninterface ProbabilityInputProps {\n  control: Control<ICalculatorFormInput>;\n  label: string;\n  field: keyof ICalculatorFormInput;\n  error?: FieldError;\n}\n\nconst ProbabilityInput = ({\n  control,\n  label,\n  field,\n  error,\n}: ProbabilityInputProps) => {\n  const errorText: Partial<{ [key: string]: string }> = {\n    required: `Please enter a value for ${label}`,\n    max: `${label} is too large, enter a number from 0.0 to 1.0`,\n    min: `${label} is too small, enter a number from 0.0 to 1.0`,\n  };\n\n  return (\n    <Controller\n      name={field}\n      control={control}\n      rules={{ min: 0, max: 1, required: true }}\n      defaultValue=\"\"\n      render={({ field }) => (\n        <TextField\n          {...field}\n          label={label}\n          id={label}\n          type=\"number\"\n          inputProps={{ step: \"any\" }}\n          error={Boolean(error)}\n          helperText={error && errorText[error.type]}\n        />\n      )}\n    />\n  );\n};\n\nexport default ProbabilityCalculatorApp;\n","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core\";\n\nlet theme = createMuiTheme({\n  typography: {\n    htmlFontSize: 10,\n  },\n  props: {\n    MuiTextField: {\n      variant: \"outlined\",\n    },\n    MuiCard: {\n      variant: \"outlined\",\n    },\n  },\n});\n\ntheme = responsiveFontSizes(theme);\n\nexport default theme;\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ProbabilityCalculatorApp from \"./ProbabilityCalculatorApp\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <StrictMode>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <ProbabilityCalculatorApp />\n    </ThemeProvider>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}